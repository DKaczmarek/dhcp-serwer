// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dhcpFrame.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dhcpFrame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dhcpFrame {

namespace {

const ::google::protobuf::Descriptor* Mess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mess_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dhcpFrame_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dhcpFrame_2eproto() {
  protobuf_AddDesc_dhcpFrame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dhcpFrame.proto");
  GOOGLE_CHECK(file != NULL);
  Mess_descriptor_ = file->message_type(0);
  static const int Mess_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, htype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, hlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, hops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, xid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, ciaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, yiaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, siaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, giaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, chaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, sname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, opc_),
  };
  Mess_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mess_descriptor_,
      Mess::internal_default_instance(),
      Mess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, _has_bits_),
      -1,
      -1,
      sizeof(Mess),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mess, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dhcpFrame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mess_descriptor_, Mess::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dhcpFrame_2eproto() {
  Mess_default_instance_.Shutdown();
  delete Mess_reflection_;
  delete Mess::_default_sname_;
  delete Mess::_default_file_;
}

void protobuf_InitDefaults_dhcpFrame_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Mess::_default_sname_ =
      new ::std::string("DHCPserver", 10);
  Mess::_default_file_ =
      new ::std::string("null", 4);
  Mess_default_instance_.DefaultConstruct();
  Mess_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_dhcpFrame_2eproto_once_);
void protobuf_InitDefaults_dhcpFrame_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_dhcpFrame_2eproto_once_,
                 &protobuf_InitDefaults_dhcpFrame_2eproto_impl);
}
void protobuf_AddDesc_dhcpFrame_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_dhcpFrame_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017dhcpFrame.proto\022\tdhcpFrame\"\371\001\n\004Mess\022\n\n"
    "\002op\030\001 \002(\005\022\020\n\005htype\030\002 \002(\005:\0016\022\017\n\004hlen\030\003 \002("
    "\005:\0016\022\014\n\004hops\030\004 \001(\005\022\013\n\003xid\030\005 \002(\005\022\014\n\004secs\030"
    "\006 \001(\005\022\r\n\005flags\030\007 \001(\005\022\016\n\006ciaddr\030\010 \001(\t\022\016\n\006"
    "yiaddr\030\t \002(\t\022\016\n\006siaddr\030\n \001(\t\022\016\n\006giaddr\030\013"
    " \002(\t\022\016\n\006chaddr\030\014 \002(\t\022\031\n\005sname\030\r \001(\t:\nDHC"
    "Pserver\022\022\n\004file\030\016 \001(\t:\004null\022\013\n\003opc\030\017 \002(\005", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dhcpFrame.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dhcpFrame_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_dhcpFrame_2eproto_once_);
void protobuf_AddDesc_dhcpFrame_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_dhcpFrame_2eproto_once_,
                 &protobuf_AddDesc_dhcpFrame_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dhcpFrame_2eproto {
  StaticDescriptorInitializer_dhcpFrame_2eproto() {
    protobuf_AddDesc_dhcpFrame_2eproto();
  }
} static_descriptor_initializer_dhcpFrame_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

::std::string* Mess::_default_sname_ = NULL;
::std::string* Mess::_default_file_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mess::kOpFieldNumber;
const int Mess::kHtypeFieldNumber;
const int Mess::kHlenFieldNumber;
const int Mess::kHopsFieldNumber;
const int Mess::kXidFieldNumber;
const int Mess::kSecsFieldNumber;
const int Mess::kFlagsFieldNumber;
const int Mess::kCiaddrFieldNumber;
const int Mess::kYiaddrFieldNumber;
const int Mess::kSiaddrFieldNumber;
const int Mess::kGiaddrFieldNumber;
const int Mess::kChaddrFieldNumber;
const int Mess::kSnameFieldNumber;
const int Mess::kFileFieldNumber;
const int Mess::kOpcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mess::Mess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_dhcpFrame_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dhcpFrame.Mess)
}

void Mess::InitAsDefaultInstance() {
}

Mess::Mess(const Mess& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dhcpFrame.Mess)
}

void Mess::SharedCtor() {
  _cached_size_ = 0;
  ciaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yiaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  siaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  giaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.UnsafeSetDefault(_default_sname_);
  file_.UnsafeSetDefault(_default_file_);
  ::memset(&op_, 0, reinterpret_cast<char*>(&opc_) -
    reinterpret_cast<char*>(&op_) + sizeof(opc_));
  htype_ = 6;
  hlen_ = 6;
}

Mess::~Mess() {
  // @@protoc_insertion_point(destructor:dhcpFrame.Mess)
  SharedDtor();
}

void Mess::SharedDtor() {
  ciaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yiaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  siaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  giaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.DestroyNoArena(_default_sname_);
  file_.DestroyNoArena(_default_file_);
}

void Mess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mess_descriptor_;
}

const Mess& Mess::default_instance() {
  protobuf_InitDefaults_dhcpFrame_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mess> Mess_default_instance_;

Mess* Mess::New(::google::protobuf::Arena* arena) const {
  Mess* n = new Mess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mess::Clear() {
// @@protoc_insertion_point(message_clear_start:dhcpFrame.Mess)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mess, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mess*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(op_, flags_);
    htype_ = 6;
    hlen_ = 6;
    if (has_ciaddr()) {
      ciaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 32512u) {
    if (has_yiaddr()) {
      yiaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_siaddr()) {
      siaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_giaddr()) {
      giaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chaddr()) {
      chaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sname()) {
      sname_.ClearToDefaultNoArena(_default_sname_);
    }
    if (has_file()) {
      file_.ClearToDefaultNoArena(_default_file_);
    }
    opc_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Mess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dhcpFrame.Mess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (tag == 8) {
          set_has_op();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_htype;
        break;
      }

      // required int32 htype = 2 [default = 6];
      case 2: {
        if (tag == 16) {
         parse_htype:
          set_has_htype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &htype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hlen;
        break;
      }

      // required int32 hlen = 3 [default = 6];
      case 3: {
        if (tag == 24) {
         parse_hlen:
          set_has_hlen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hlen_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hops;
        break;
      }

      // optional int32 hops = 4;
      case 4: {
        if (tag == 32) {
         parse_hops:
          set_has_hops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_xid;
        break;
      }

      // required int32 xid = 5;
      case 5: {
        if (tag == 40) {
         parse_xid:
          set_has_xid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_secs;
        break;
      }

      // optional int32 secs = 6;
      case 6: {
        if (tag == 48) {
         parse_secs:
          set_has_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secs_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flags;
        break;
      }

      // optional int32 flags = 7;
      case 7: {
        if (tag == 56) {
         parse_flags:
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ciaddr;
        break;
      }

      // optional string ciaddr = 8;
      case 8: {
        if (tag == 66) {
         parse_ciaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ciaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ciaddr().data(), this->ciaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dhcpFrame.Mess.ciaddr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_yiaddr;
        break;
      }

      // required string yiaddr = 9;
      case 9: {
        if (tag == 74) {
         parse_yiaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yiaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->yiaddr().data(), this->yiaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dhcpFrame.Mess.yiaddr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_siaddr;
        break;
      }

      // optional string siaddr = 10;
      case 10: {
        if (tag == 82) {
         parse_siaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_siaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->siaddr().data(), this->siaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dhcpFrame.Mess.siaddr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_giaddr;
        break;
      }

      // required string giaddr = 11;
      case 11: {
        if (tag == 90) {
         parse_giaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->giaddr().data(), this->giaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dhcpFrame.Mess.giaddr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_chaddr;
        break;
      }

      // required string chaddr = 12;
      case 12: {
        if (tag == 98) {
         parse_chaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chaddr().data(), this->chaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dhcpFrame.Mess.chaddr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sname;
        break;
      }

      // optional string sname = 13 [default = "DHCPserver"];
      case 13: {
        if (tag == 106) {
         parse_sname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dhcpFrame.Mess.sname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_file;
        break;
      }

      // optional string file = 14 [default = "null"];
      case 14: {
        if (tag == 114) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dhcpFrame.Mess.file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_opc;
        break;
      }

      // required int32 opc = 15;
      case 15: {
        if (tag == 120) {
         parse_opc:
          set_has_opc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dhcpFrame.Mess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dhcpFrame.Mess)
  return false;
#undef DO_
}

void Mess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dhcpFrame.Mess)
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // required int32 htype = 2 [default = 6];
  if (has_htype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->htype(), output);
  }

  // required int32 hlen = 3 [default = 6];
  if (has_hlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hlen(), output);
  }

  // optional int32 hops = 4;
  if (has_hops()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hops(), output);
  }

  // required int32 xid = 5;
  if (has_xid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->xid(), output);
  }

  // optional int32 secs = 6;
  if (has_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->secs(), output);
  }

  // optional int32 flags = 7;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flags(), output);
  }

  // optional string ciaddr = 8;
  if (has_ciaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ciaddr().data(), this->ciaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.ciaddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ciaddr(), output);
  }

  // required string yiaddr = 9;
  if (has_yiaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yiaddr().data(), this->yiaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.yiaddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->yiaddr(), output);
  }

  // optional string siaddr = 10;
  if (has_siaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->siaddr().data(), this->siaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.siaddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->siaddr(), output);
  }

  // required string giaddr = 11;
  if (has_giaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->giaddr().data(), this->giaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.giaddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->giaddr(), output);
  }

  // required string chaddr = 12;
  if (has_chaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chaddr().data(), this->chaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.chaddr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->chaddr(), output);
  }

  // optional string sname = 13 [default = "DHCPserver"];
  if (has_sname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.sname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sname(), output);
  }

  // optional string file = 14 [default = "null"];
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->file(), output);
  }

  // required int32 opc = 15;
  if (has_opc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->opc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dhcpFrame.Mess)
}

::google::protobuf::uint8* Mess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dhcpFrame.Mess)
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // required int32 htype = 2 [default = 6];
  if (has_htype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->htype(), target);
  }

  // required int32 hlen = 3 [default = 6];
  if (has_hlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hlen(), target);
  }

  // optional int32 hops = 4;
  if (has_hops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hops(), target);
  }

  // required int32 xid = 5;
  if (has_xid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->xid(), target);
  }

  // optional int32 secs = 6;
  if (has_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->secs(), target);
  }

  // optional int32 flags = 7;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flags(), target);
  }

  // optional string ciaddr = 8;
  if (has_ciaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ciaddr().data(), this->ciaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.ciaddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ciaddr(), target);
  }

  // required string yiaddr = 9;
  if (has_yiaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yiaddr().data(), this->yiaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.yiaddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->yiaddr(), target);
  }

  // optional string siaddr = 10;
  if (has_siaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->siaddr().data(), this->siaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.siaddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->siaddr(), target);
  }

  // required string giaddr = 11;
  if (has_giaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->giaddr().data(), this->giaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.giaddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->giaddr(), target);
  }

  // required string chaddr = 12;
  if (has_chaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chaddr().data(), this->chaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.chaddr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->chaddr(), target);
  }

  // optional string sname = 13 [default = "DHCPserver"];
  if (has_sname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.sname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sname(), target);
  }

  // optional string file = 14 [default = "null"];
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dhcpFrame.Mess.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->file(), target);
  }

  // required int32 opc = 15;
  if (has_opc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->opc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dhcpFrame.Mess)
  return target;
}

size_t Mess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dhcpFrame.Mess)
  size_t total_size = 0;

  if (has_op()) {
    // required int32 op = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->op());
  }

  if (has_htype()) {
    // required int32 htype = 2 [default = 6];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->htype());
  }

  if (has_hlen()) {
    // required int32 hlen = 3 [default = 6];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hlen());
  }

  if (has_xid()) {
    // required int32 xid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xid());
  }

  if (has_yiaddr()) {
    // required string yiaddr = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->yiaddr());
  }

  if (has_giaddr()) {
    // required string giaddr = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->giaddr());
  }

  if (has_chaddr()) {
    // required string chaddr = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chaddr());
  }

  if (has_opc()) {
    // required int32 opc = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opc());
  }

  return total_size;
}
size_t Mess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dhcpFrame.Mess)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00004d17) ^ 0x00004d17) == 0) {  // All required fields are present.
    // required int32 op = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->op());

    // required int32 htype = 2 [default = 6];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->htype());

    // required int32 hlen = 3 [default = 6];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hlen());

    // required int32 xid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xid());

    // required string yiaddr = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->yiaddr());

    // required string giaddr = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->giaddr());

    // required string chaddr = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chaddr());

    // required int32 opc = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 232u) {
    // optional int32 hops = 4;
    if (has_hops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hops());
    }

    // optional int32 secs = 6;
    if (has_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secs());
    }

    // optional int32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional string ciaddr = 8;
    if (has_ciaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ciaddr());
    }

  }
  if (_has_bits_[9 / 32] & 12800u) {
    // optional string siaddr = 10;
    if (has_siaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->siaddr());
    }

    // optional string sname = 13 [default = "DHCPserver"];
    if (has_sname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sname());
    }

    // optional string file = 14 [default = "null"];
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dhcpFrame.Mess)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dhcpFrame.Mess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dhcpFrame.Mess)
    UnsafeMergeFrom(*source);
  }
}

void Mess::MergeFrom(const Mess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dhcpFrame.Mess)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mess::UnsafeMergeFrom(const Mess& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_htype()) {
      set_htype(from.htype());
    }
    if (from.has_hlen()) {
      set_hlen(from.hlen());
    }
    if (from.has_hops()) {
      set_hops(from.hops());
    }
    if (from.has_xid()) {
      set_xid(from.xid());
    }
    if (from.has_secs()) {
      set_secs(from.secs());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_ciaddr()) {
      set_has_ciaddr();
      ciaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ciaddr_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yiaddr()) {
      set_has_yiaddr();
      yiaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.yiaddr_);
    }
    if (from.has_siaddr()) {
      set_has_siaddr();
      siaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.siaddr_);
    }
    if (from.has_giaddr()) {
      set_has_giaddr();
      giaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.giaddr_);
    }
    if (from.has_chaddr()) {
      set_has_chaddr();
      chaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chaddr_);
    }
    if (from.has_sname()) {
      set_has_sname();
      sname_.AssignWithDefault(_default_sname_, from.sname_);
    }
    if (from.has_file()) {
      set_has_file();
      file_.AssignWithDefault(_default_file_, from.file_);
    }
    if (from.has_opc()) {
      set_opc(from.opc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Mess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dhcpFrame.Mess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mess::CopyFrom(const Mess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dhcpFrame.Mess)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00004d17) != 0x00004d17) return false;

  return true;
}

void Mess::Swap(Mess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mess::InternalSwap(Mess* other) {
  std::swap(op_, other->op_);
  std::swap(htype_, other->htype_);
  std::swap(hlen_, other->hlen_);
  std::swap(hops_, other->hops_);
  std::swap(xid_, other->xid_);
  std::swap(secs_, other->secs_);
  std::swap(flags_, other->flags_);
  ciaddr_.Swap(&other->ciaddr_);
  yiaddr_.Swap(&other->yiaddr_);
  siaddr_.Swap(&other->siaddr_);
  giaddr_.Swap(&other->giaddr_);
  chaddr_.Swap(&other->chaddr_);
  sname_.Swap(&other->sname_);
  file_.Swap(&other->file_);
  std::swap(opc_, other->opc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mess_descriptor_;
  metadata.reflection = Mess_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mess

// required int32 op = 1;
bool Mess::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mess::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
void Mess::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mess::clear_op() {
  op_ = 0;
  clear_has_op();
}
::google::protobuf::int32 Mess::op() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.op)
  return op_;
}
void Mess::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.op)
}

// required int32 htype = 2 [default = 6];
bool Mess::has_htype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mess::set_has_htype() {
  _has_bits_[0] |= 0x00000002u;
}
void Mess::clear_has_htype() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mess::clear_htype() {
  htype_ = 6;
  clear_has_htype();
}
::google::protobuf::int32 Mess::htype() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.htype)
  return htype_;
}
void Mess::set_htype(::google::protobuf::int32 value) {
  set_has_htype();
  htype_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.htype)
}

// required int32 hlen = 3 [default = 6];
bool Mess::has_hlen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mess::set_has_hlen() {
  _has_bits_[0] |= 0x00000004u;
}
void Mess::clear_has_hlen() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mess::clear_hlen() {
  hlen_ = 6;
  clear_has_hlen();
}
::google::protobuf::int32 Mess::hlen() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.hlen)
  return hlen_;
}
void Mess::set_hlen(::google::protobuf::int32 value) {
  set_has_hlen();
  hlen_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.hlen)
}

// optional int32 hops = 4;
bool Mess::has_hops() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mess::set_has_hops() {
  _has_bits_[0] |= 0x00000008u;
}
void Mess::clear_has_hops() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mess::clear_hops() {
  hops_ = 0;
  clear_has_hops();
}
::google::protobuf::int32 Mess::hops() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.hops)
  return hops_;
}
void Mess::set_hops(::google::protobuf::int32 value) {
  set_has_hops();
  hops_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.hops)
}

// required int32 xid = 5;
bool Mess::has_xid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mess::set_has_xid() {
  _has_bits_[0] |= 0x00000010u;
}
void Mess::clear_has_xid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mess::clear_xid() {
  xid_ = 0;
  clear_has_xid();
}
::google::protobuf::int32 Mess::xid() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.xid)
  return xid_;
}
void Mess::set_xid(::google::protobuf::int32 value) {
  set_has_xid();
  xid_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.xid)
}

// optional int32 secs = 6;
bool Mess::has_secs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mess::set_has_secs() {
  _has_bits_[0] |= 0x00000020u;
}
void Mess::clear_has_secs() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mess::clear_secs() {
  secs_ = 0;
  clear_has_secs();
}
::google::protobuf::int32 Mess::secs() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.secs)
  return secs_;
}
void Mess::set_secs(::google::protobuf::int32 value) {
  set_has_secs();
  secs_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.secs)
}

// optional int32 flags = 7;
bool Mess::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Mess::set_has_flags() {
  _has_bits_[0] |= 0x00000040u;
}
void Mess::clear_has_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
void Mess::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
::google::protobuf::int32 Mess::flags() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.flags)
  return flags_;
}
void Mess::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.flags)
}

// optional string ciaddr = 8;
bool Mess::has_ciaddr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Mess::set_has_ciaddr() {
  _has_bits_[0] |= 0x00000080u;
}
void Mess::clear_has_ciaddr() {
  _has_bits_[0] &= ~0x00000080u;
}
void Mess::clear_ciaddr() {
  ciaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ciaddr();
}
const ::std::string& Mess::ciaddr() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.ciaddr)
  return ciaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_ciaddr(const ::std::string& value) {
  set_has_ciaddr();
  ciaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.ciaddr)
}
void Mess::set_ciaddr(const char* value) {
  set_has_ciaddr();
  ciaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhcpFrame.Mess.ciaddr)
}
void Mess::set_ciaddr(const char* value, size_t size) {
  set_has_ciaddr();
  ciaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhcpFrame.Mess.ciaddr)
}
::std::string* Mess::mutable_ciaddr() {
  set_has_ciaddr();
  // @@protoc_insertion_point(field_mutable:dhcpFrame.Mess.ciaddr)
  return ciaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mess::release_ciaddr() {
  // @@protoc_insertion_point(field_release:dhcpFrame.Mess.ciaddr)
  clear_has_ciaddr();
  return ciaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_allocated_ciaddr(::std::string* ciaddr) {
  if (ciaddr != NULL) {
    set_has_ciaddr();
  } else {
    clear_has_ciaddr();
  }
  ciaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ciaddr);
  // @@protoc_insertion_point(field_set_allocated:dhcpFrame.Mess.ciaddr)
}

// required string yiaddr = 9;
bool Mess::has_yiaddr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Mess::set_has_yiaddr() {
  _has_bits_[0] |= 0x00000100u;
}
void Mess::clear_has_yiaddr() {
  _has_bits_[0] &= ~0x00000100u;
}
void Mess::clear_yiaddr() {
  yiaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_yiaddr();
}
const ::std::string& Mess::yiaddr() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.yiaddr)
  return yiaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_yiaddr(const ::std::string& value) {
  set_has_yiaddr();
  yiaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.yiaddr)
}
void Mess::set_yiaddr(const char* value) {
  set_has_yiaddr();
  yiaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhcpFrame.Mess.yiaddr)
}
void Mess::set_yiaddr(const char* value, size_t size) {
  set_has_yiaddr();
  yiaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhcpFrame.Mess.yiaddr)
}
::std::string* Mess::mutable_yiaddr() {
  set_has_yiaddr();
  // @@protoc_insertion_point(field_mutable:dhcpFrame.Mess.yiaddr)
  return yiaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mess::release_yiaddr() {
  // @@protoc_insertion_point(field_release:dhcpFrame.Mess.yiaddr)
  clear_has_yiaddr();
  return yiaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_allocated_yiaddr(::std::string* yiaddr) {
  if (yiaddr != NULL) {
    set_has_yiaddr();
  } else {
    clear_has_yiaddr();
  }
  yiaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), yiaddr);
  // @@protoc_insertion_point(field_set_allocated:dhcpFrame.Mess.yiaddr)
}

// optional string siaddr = 10;
bool Mess::has_siaddr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Mess::set_has_siaddr() {
  _has_bits_[0] |= 0x00000200u;
}
void Mess::clear_has_siaddr() {
  _has_bits_[0] &= ~0x00000200u;
}
void Mess::clear_siaddr() {
  siaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_siaddr();
}
const ::std::string& Mess::siaddr() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.siaddr)
  return siaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_siaddr(const ::std::string& value) {
  set_has_siaddr();
  siaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.siaddr)
}
void Mess::set_siaddr(const char* value) {
  set_has_siaddr();
  siaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhcpFrame.Mess.siaddr)
}
void Mess::set_siaddr(const char* value, size_t size) {
  set_has_siaddr();
  siaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhcpFrame.Mess.siaddr)
}
::std::string* Mess::mutable_siaddr() {
  set_has_siaddr();
  // @@protoc_insertion_point(field_mutable:dhcpFrame.Mess.siaddr)
  return siaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mess::release_siaddr() {
  // @@protoc_insertion_point(field_release:dhcpFrame.Mess.siaddr)
  clear_has_siaddr();
  return siaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_allocated_siaddr(::std::string* siaddr) {
  if (siaddr != NULL) {
    set_has_siaddr();
  } else {
    clear_has_siaddr();
  }
  siaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), siaddr);
  // @@protoc_insertion_point(field_set_allocated:dhcpFrame.Mess.siaddr)
}

// required string giaddr = 11;
bool Mess::has_giaddr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Mess::set_has_giaddr() {
  _has_bits_[0] |= 0x00000400u;
}
void Mess::clear_has_giaddr() {
  _has_bits_[0] &= ~0x00000400u;
}
void Mess::clear_giaddr() {
  giaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_giaddr();
}
const ::std::string& Mess::giaddr() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.giaddr)
  return giaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_giaddr(const ::std::string& value) {
  set_has_giaddr();
  giaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.giaddr)
}
void Mess::set_giaddr(const char* value) {
  set_has_giaddr();
  giaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhcpFrame.Mess.giaddr)
}
void Mess::set_giaddr(const char* value, size_t size) {
  set_has_giaddr();
  giaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhcpFrame.Mess.giaddr)
}
::std::string* Mess::mutable_giaddr() {
  set_has_giaddr();
  // @@protoc_insertion_point(field_mutable:dhcpFrame.Mess.giaddr)
  return giaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mess::release_giaddr() {
  // @@protoc_insertion_point(field_release:dhcpFrame.Mess.giaddr)
  clear_has_giaddr();
  return giaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_allocated_giaddr(::std::string* giaddr) {
  if (giaddr != NULL) {
    set_has_giaddr();
  } else {
    clear_has_giaddr();
  }
  giaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), giaddr);
  // @@protoc_insertion_point(field_set_allocated:dhcpFrame.Mess.giaddr)
}

// required string chaddr = 12;
bool Mess::has_chaddr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Mess::set_has_chaddr() {
  _has_bits_[0] |= 0x00000800u;
}
void Mess::clear_has_chaddr() {
  _has_bits_[0] &= ~0x00000800u;
}
void Mess::clear_chaddr() {
  chaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chaddr();
}
const ::std::string& Mess::chaddr() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.chaddr)
  return chaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_chaddr(const ::std::string& value) {
  set_has_chaddr();
  chaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.chaddr)
}
void Mess::set_chaddr(const char* value) {
  set_has_chaddr();
  chaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhcpFrame.Mess.chaddr)
}
void Mess::set_chaddr(const char* value, size_t size) {
  set_has_chaddr();
  chaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhcpFrame.Mess.chaddr)
}
::std::string* Mess::mutable_chaddr() {
  set_has_chaddr();
  // @@protoc_insertion_point(field_mutable:dhcpFrame.Mess.chaddr)
  return chaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mess::release_chaddr() {
  // @@protoc_insertion_point(field_release:dhcpFrame.Mess.chaddr)
  clear_has_chaddr();
  return chaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mess::set_allocated_chaddr(::std::string* chaddr) {
  if (chaddr != NULL) {
    set_has_chaddr();
  } else {
    clear_has_chaddr();
  }
  chaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chaddr);
  // @@protoc_insertion_point(field_set_allocated:dhcpFrame.Mess.chaddr)
}

// optional string sname = 13 [default = "DHCPserver"];
bool Mess::has_sname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Mess::set_has_sname() {
  _has_bits_[0] |= 0x00001000u;
}
void Mess::clear_has_sname() {
  _has_bits_[0] &= ~0x00001000u;
}
void Mess::clear_sname() {
  sname_.ClearToDefaultNoArena(_default_sname_);
  clear_has_sname();
}
const ::std::string& Mess::sname() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.sname)
  return sname_.GetNoArena(_default_sname_);
}
void Mess::set_sname(const ::std::string& value) {
  set_has_sname();
  sname_.SetNoArena(_default_sname_, value);
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.sname)
}
void Mess::set_sname(const char* value) {
  set_has_sname();
  sname_.SetNoArena(_default_sname_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhcpFrame.Mess.sname)
}
void Mess::set_sname(const char* value, size_t size) {
  set_has_sname();
  sname_.SetNoArena(_default_sname_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhcpFrame.Mess.sname)
}
::std::string* Mess::mutable_sname() {
  set_has_sname();
  // @@protoc_insertion_point(field_mutable:dhcpFrame.Mess.sname)
  return sname_.MutableNoArena(_default_sname_);
}
::std::string* Mess::release_sname() {
  // @@protoc_insertion_point(field_release:dhcpFrame.Mess.sname)
  clear_has_sname();
  return sname_.ReleaseNoArena(_default_sname_);
}
void Mess::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    set_has_sname();
  } else {
    clear_has_sname();
  }
  sname_.SetAllocatedNoArena(_default_sname_, sname);
  // @@protoc_insertion_point(field_set_allocated:dhcpFrame.Mess.sname)
}

// optional string file = 14 [default = "null"];
bool Mess::has_file() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Mess::set_has_file() {
  _has_bits_[0] |= 0x00002000u;
}
void Mess::clear_has_file() {
  _has_bits_[0] &= ~0x00002000u;
}
void Mess::clear_file() {
  file_.ClearToDefaultNoArena(_default_file_);
  clear_has_file();
}
const ::std::string& Mess::file() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.file)
  return file_.GetNoArena(_default_file_);
}
void Mess::set_file(const ::std::string& value) {
  set_has_file();
  file_.SetNoArena(_default_file_, value);
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.file)
}
void Mess::set_file(const char* value) {
  set_has_file();
  file_.SetNoArena(_default_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dhcpFrame.Mess.file)
}
void Mess::set_file(const char* value, size_t size) {
  set_has_file();
  file_.SetNoArena(_default_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dhcpFrame.Mess.file)
}
::std::string* Mess::mutable_file() {
  set_has_file();
  // @@protoc_insertion_point(field_mutable:dhcpFrame.Mess.file)
  return file_.MutableNoArena(_default_file_);
}
::std::string* Mess::release_file() {
  // @@protoc_insertion_point(field_release:dhcpFrame.Mess.file)
  clear_has_file();
  return file_.ReleaseNoArena(_default_file_);
}
void Mess::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    set_has_file();
  } else {
    clear_has_file();
  }
  file_.SetAllocatedNoArena(_default_file_, file);
  // @@protoc_insertion_point(field_set_allocated:dhcpFrame.Mess.file)
}

// required int32 opc = 15;
bool Mess::has_opc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Mess::set_has_opc() {
  _has_bits_[0] |= 0x00004000u;
}
void Mess::clear_has_opc() {
  _has_bits_[0] &= ~0x00004000u;
}
void Mess::clear_opc() {
  opc_ = 0;
  clear_has_opc();
}
::google::protobuf::int32 Mess::opc() const {
  // @@protoc_insertion_point(field_get:dhcpFrame.Mess.opc)
  return opc_;
}
void Mess::set_opc(::google::protobuf::int32 value) {
  set_has_opc();
  opc_ = value;
  // @@protoc_insertion_point(field_set:dhcpFrame.Mess.opc)
}

inline const Mess* Mess::internal_default_instance() {
  return &Mess_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dhcpFrame

// @@protoc_insertion_point(global_scope)
